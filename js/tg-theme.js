// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase (–ó–ê–ú–ï–ù–ò–¢–ï –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏!)
const firebaseConfig = {
  apiKey: "AIzaSyB6Oj0VgRn-UnSyBAbeB-rSO2L_vsGCFWk",
  authDomain: "study-planner-tma.firebaseapp.com",
  databaseURL: "https://study-planner-tma-default-rtdb.firebaseio.com",
  projectId: "study-planner-tma",
  storageBucket: "study-planner-tma.firebasestorage.app",
  messagingSenderId: "750316555731",
  appId: "1:750316555731:web:976f190e97b7bf26fb7326",
  measurementId: "G-QS0E6R6J08"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
function initFirebase() {
  try {
    if (typeof firebase === 'undefined') {
      throw new Error('Firebase SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ Firebase
    if (!firebase.apps.length) {
      const app = firebase.initializeApp(firebaseConfig);
      console.log('Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return app;
    } else {
      return firebase.app();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram
function checkTelegramAuth(tg) {
  if (!tg.initDataUnsafe?.user) {
    tg.showAlert('‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Telegram');
    tg.close();
    return false;
  }
  return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
  const tg = window.Telegram?.WebApp;
  
  // –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram)
  if (!tg) {
    console.warn('–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∑–∞–ø—É—Å–∫ –≤–Ω–µ Telegram');
    initDevMode();
    return;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
  const firebaseApp = initFirebase();
  if (!firebaseApp) {
    tg.showAlert('üî• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (!checkTelegramAuth(tg)) return;

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  setupApp(tg, firebaseApp);
});

function setupApp(tg, firebase) {
  // 1. –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
  tg.expand();
  tg.enableClosingConfirmation();

  // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
  applyTheme(tg);

  // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
  tg.BackButton.show();
  tg.BackButton.onClick(() => {
    tg.showConfirm('–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?', (confirmed) => {
      if (confirmed) tg.close();
    });
  });

  // 4. –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
  tg.MainButton
    .setText('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
    .setParams({ color: tg.themeParams.button_color })
    .show()
    .onClick(() => saveUserData(tg, firebase));

  // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  document.getElementById('app-container').style.display = 'block';
  console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserData(tg, firebase) {
  try {
    const userId = tg.initDataUnsafe.user.id;
    const userData = {
      tasks: window.tasks || [],
      sessions: window.sessions || [],
      lastSave: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    await firebase.database().ref(`users/${userId}`).set(userData);
    
    // –î—É–±–ª–∏—Ä—É–µ–º –≤ Telegram Cloud
    tg.sendData(JSON.stringify(userData));
    
    tg.showAlert('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    tg.showAlert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
function applyTheme(tg) {
  const root = document.documentElement;
  const params = tg.themeParams;

  root.style.setProperty('--bg-primary', params.bg_color || '#ffffff');
  root.style.setProperty('--text-primary', params.text_color || '#222222');
  root.style.setProperty('--accent', params.button_color || '#2481cc');
  
  if (tg.colorScheme === 'dark') {
    root.classList.add('dark-theme');
  }
}

// –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
function initDevMode() {
  console.log('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
  
  // –ú–æ–∫-–æ–±—ä–µ–∫—Ç Telegram WebApp
  window.Telegram = {
    WebApp: {
      initDataUnsafe: {
        user: {
          id: 1234567890,
          first_name: 'TestUser',
          username: 'test_dev'
        }
      },
      themeParams: {
        bg_color: '#f0f0f0',
        text_color: '#333333',
        button_color: '#4a80f0'
      },
      colorScheme: 'light',
      expand: () => console.log('[MOCK] App expanded'),
      showAlert: (msg) => alert(`[ALERT] ${msg}`),
      showConfirm: (msg, cb) => cb(confirm(msg)),
      sendData: (data) => console.log('[MOCK] Data sent:', data),
      close: () => console.log('[MOCK] App closed'),
      BackButton: {
        show: () => console.log('[MOCK] BackButton shown'),
        onClick: (cb) => { window.mockBackHandler = cb; }
      },
      MainButton: {
        setText: (t) => console.log(`[MOCK] MainButton text: ${t}`),
        show: () => console.log('[MOCK] MainButton shown'),
        onClick: (cb) => { window.mockMainHandler = cb; }
      }
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  initFirebase();
}
